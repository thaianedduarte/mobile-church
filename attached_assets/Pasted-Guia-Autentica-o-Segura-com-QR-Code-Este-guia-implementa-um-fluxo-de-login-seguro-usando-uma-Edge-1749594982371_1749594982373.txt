Guia: Autentica√ß√£o Segura com QR Code
Este guia implementa um fluxo de login seguro, usando uma Edge Function como "porteiro" para validar o QR Code e as Pol√≠ticas de Seguran√ßa (RLS) para controlar o que o usu√°rio pode ver ap√≥s o login.

A Estrat√©gia
Cliente (App React Native): Escaneia o QR Code.

Cliente -> Servidor: Envia o c√≥digo para uma Edge Function chamada login-com-qrcode. A chamada √© segura.

Servidor (Edge Function):

Recebe o c√≥digo.

Usa privil√©gios de administrador para buscar na tabela membros pelo qr_code.

Se encontra, pega o id do usu√°rio associado (da tabela profiles).

Gera um token de sess√£o (JWT) para aquele usu√°rio.

Retorna o token de sess√£o para o cliente.

Cliente: Recebe o token e usa supabase.auth.setSession() para estabelecer a sess√£o de login.

Acesso Futuro: Todas as pr√≥ximas chamadas (select, insert, etc.) usar√£o esse token, e as Pol√≠ticas de RLS no seu banco de dados garantir√£o que o usu√°rio s√≥ acesse o que tem permiss√£o.

Passo 1: Pr√©-requisito - Garantir a Liga√ß√£o entre membros e profiles
Sua tabela profiles j√° est√° corretamente ligada √† auth.users pela chave prim√°ria id. Precisamos garantir que a tabela membros tamb√©m tenha essa liga√ß√£o. A forma mais limpa √© adicionar uma coluna profile_id em membros.

Execute este SQL no seu Editor do Supabase:

ALTER TABLE public.membros
ADD COLUMN profile_id UUID REFERENCES public.profiles(id);

-- Opcional: Crie um √≠ndice para buscas mais r√°pidas
CREATE INDEX idx_membros_profile_id ON public.membros(profile_id);

Agora, ao criar um membro, voc√™ deve associ√°-lo a um perfil (e, consequentemente, a um usu√°rio de autentica√ß√£o).

Passo 2: Backend - Criar a Edge Function
No seu projeto (pode ser no Replit, localmente, etc.), voc√™ precisar√° da Supabase CLI para criar e implantar a fun√ß√£o.

Instale a CLI: npm i supabase -g

Conecte ao seu projeto: supabase login e depois supabase link --project-ref SEU_PROJECT_ID

Crie a fun√ß√£o: supabase functions new login-com-qrcode

Isso criar√° uma pasta supabase/functions/login-com-qrcode/index.ts. Substitua o conte√∫do do arquivo index.ts por este c√≥digo:

// supabase/functions/login-com-qrcode/index.ts
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
import { corsHeaders } from '../_shared/cors.ts';

// CUIDADO: Este Admin Client usa a service_role_key e ignora a RLS.
// Use-o apenas em Edge Functions, nunca no frontend.
const supabaseAdmin = createClient(
  Deno.env.get('SUPABASE_URL') ?? '',
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
);

Deno.serve(async (req) => {
  // Trata a requisi√ß√£o OPTIONS para o CORS
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    // 1. Extrai o QR Code do corpo da requisi√ß√£o
    const { qrCode } = await req.json();
    if (!qrCode) {
      throw new Error("QR Code n√£o fornecido.");
    }

    // 2. Busca o membro pelo QR Code usando o cliente Admin
    const { data: membro, error: membroError } = await supabaseAdmin
      .from('membros')
      .select('profile_id')
      .eq('qr_code', qrCode)
      .single();

    if (membroError) throw membroError;
    if (!membro || !membro.profile_id) {
      throw new Error("QR Code inv√°lido ou membro n√£o associado a um perfil.");
    }

    // 3. Gera a sess√£o para o usu√°rio encontrado
    // ATEN√á√ÉO: A fun√ß√£o `admin.generateLink` foi descontinuada.
    // O m√©todo correto agora √© criar um "session token" para o cliente usar.
    // No entanto, a API para isso n√£o √© exposta diretamente.
    // A abordagem mais robusta √© usar o `signInWithId`, mas isso exige que o Supabase
    // confie na Edge Function. Uma solu√ß√£o mais simples √© usar "Magic Links".
    const { data: sessionData, error: sessionError } = await supabaseAdmin.auth.admin.generateLink({
      type: 'magiclink',
      email: (await supabaseAdmin.auth.admin.getUserById(membro.profile_id)).data.user.email
    });
    
    if (sessionError) throw sessionError;

    // 4. Retorna os dados da sess√£o para o cliente
    return new Response(
      JSON.stringify(sessionData),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      }
    );

  } catch (error) {
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 400,
      }
    );
  }
});

Implante a fun√ß√£o: supabase functions deploy login-com-qrcode --no-verify-jwt

Passo 3: Frontend - Atualizar o App React Native
Agora, ajuste sua fun√ß√£o handleScanSuccess para chamar a Edge Function.

// Sua fun√ß√£o de login modificada
const handleScanSuccess = async (scannedData: string) => {
  setShowScanner(false);
  setIsLoading(true);
  setError(null); // Limpa erros anteriores

  try {
    // Extrai o c√≥digo do QR Code (sua l√≥gica atual est√° boa)
    const codeMatch = scannedData.match(/key=([^&]+)/);
    const code = codeMatch ? codeMatch[1] : scannedData;
    
    console.log('üîë Chave extra√≠da:', code);

    // 1. CHAMA A EDGE FUNCTION
    const { data: functionData, error: functionError } = await supabase.functions.invoke(
      'login-com-qrcode',
      { body: { qrCode: code } }
    );

    if (functionError) {
      // O erro pode vir do network ou da pr√≥pria fun√ß√£o
      throw new Error(functionError.message || 'Falha ao contatar o servidor.');
    }
    
    if (functionData.error) {
       // Erro de l√≥gica retornado pela fun√ß√£o (ex: QR Code inv√°lido)
       throw new Error(functionData.error);
    }

    // 2. EXTRAI O TOKEN DA RESPOSTA E AUTENTICA
    // A resposta do `generateLink` cont√©m o token_hash e outros dados.
    // O cliente precisa visitar o link para completar, mas para uma API
    // podemos usar o `verifyOtp` para trocar o token por uma sess√£o.
    const { data: sessionData, error: sessionError } = await supabase.auth.verifyOtp({
      type: 'magiclink',
      token_hash: functionData.properties.action_link.split('token=')[1].split('&')[0], // extrai o token do link
    });

    if (sessionError) throw sessionError;

    // 3. SESS√ÉO ESTABELECIDA!
    // `sessionData.session` agora cont√©m a sess√£o do usu√°rio.
    // O Supabase JS client automaticamente armazena a sess√£o.
    
    console.log('‚úÖ Login bem-sucedido!', sessionData.session.user.email);

    router.replace('/initial');

  } catch (err: any) {
    console.error('Falha no login:', err);
    setError(err.message || 'QR Code inv√°lido. Tente novamente.');
  } finally {
    setIsLoading(false);
  }
};
