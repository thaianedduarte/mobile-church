import { createClient } from '@supabase/supabase-js';
import { Platform } from 'react-native';
import * as SecureStore from 'expo-secure-store';
import { DashboardData, Event, Donation, DonationMonth, ChurchFinances, MemberProfile } from '@/types';

// Storage abstraction
const secureStoreOrLocalStorage = {
  getItem: async (key: string): Promise<string | null> => { if (Platform.OS === 'web') { return localStorage.getItem(key); } return SecureStore.getItemAsync(key); },
  setItem: async (key: string, value: string): Promise<void> => { if (Platform.OS === 'web') { localStorage.setItem(key, value); return; } return SecureStore.setItemAsync(key, value); },
  deleteItem: async (key: string): Promise<void> => { if (Platform.OS === 'web') { localStorage.removeItem(key); return; } return SecureStore.deleteItemAsync(key); }
};

// Supabase configuration
const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL || 'https://crevcbopbhjptuedfzfz.supabase.co';
const supabaseAnonKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY!;

// Cliente Supabase configurado
export const supabase = createClient(
  supabaseUrl,
  supabaseAnonKey,
  { auth: { storage: secureStoreOrLocalStorage, autoRefreshToken: true, persistSession: true, detectSessionInUrl: false } }
);

// ===================================================================
// FUNÇÕES DE AUTENTICAÇÃO E API
// ===================================================================

export const loginWithQRCode = async (qrCode: string) => { /* ...código de login... */ };
export const fetchDashboardData = async (): Promise<DashboardData> => { /* ...código do dashboard... */ };
export const fetchEvents = async (filter: 'upcoming' | 'past' | 'all'): Promise<Event[]> => { /* ...código de eventos... */ };
export const fetchDonations = async (): Promise<DonationMonth[]> => { /* ...código de doações... */ };
export const fetchChurchFinances = async (): Promise<ChurchFinances> => { /* ...código de finanças da igreja... */ };

// ===================================================================
// NOVA FUNÇÃO PARA A TELA DE PERFIL
// ===================================================================

/**
 * Busca os dados combinados do perfil e do registro de membro do usuário logado.
 */
export const fetchMemberProfile = async (): Promise<MemberProfile | null> => {
    console.log("Buscando dados do perfil do membro...");
    
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
        throw new Error('Usuário não autenticado.');
    }

    // A consulta usa um JOIN implícito para buscar dados das tabelas 'membros' e 'profiles' de uma vez.
    const { data, error } = await supabase
        .from('membros')
        .select(`
            cpf,
            nascimento,
            ativo,
            created_at,
            profiles (
                nome,
                papel
            )
        `)
        .eq('profile_id', user.id)
        .single(); // Esperamos apenas um resultado

    if (error) {
        console.error("Erro ao buscar perfil do membro:", error);
        throw new Error(`Não foi possível carregar os dados do perfil: ${error.message}`);
    }

    if (!data) {
        return null;
    }
    
    // Formata a data para um formato legível
    const formatDate = (dateString: string | null) => {
        if (!dateString) return 'Não informado';
        return new Date(dateString).toLocaleDateString('pt-BR', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
    };

    // Mapeia os dados brutos para o tipo que a tela espera
    const profileData: MemberProfile = {
        name: data.profiles?.nome || 'Nome não encontrado',
        role: data.profiles?.papel || 'Papel não informado',
        status: data.ativo ? 'active' : 'inactive',
        cpf: data.cpf || 'Não informado',
        birthDate: formatDate(data.nascimento),
        memberSince: formatDate(data.created_at)
    };

    console.log("Perfil do membro carregado com sucesso.");
    return profileData;
};